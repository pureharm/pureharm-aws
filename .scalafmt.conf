#
#  Copyright (c) 2020 BusyMachines
#
#  See company homepage at: https://www.busymachines.com/
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# See https://scalameta.org/scalafmt/docs/configuration.html for details
#
# https://github.com/scalameta/scalafmt/releases
version = 3.0.0-RC6

fileOverride {
  "glob:**/src/main/scala/**" {
    runner.dialect = scala213source3
  }
  "glob:**/src/test/scala/**" {
    runner.dialect = scala213source3
  }
  "glob:**/src/main/scala-2/**" {
    runner.dialect = scala213source3
  }
  "glob:**/src/test/scala-2/**" {
    runner.dialect = scala213source3
  }
  "glob:**/src/main/scala-3/**" {
    runner.dialect = scala3
  }
  "glob:**/src/test/scala-3/**" {
    runner.dialect = scala3
  }
  "glob:**/project/*.scala" {
    runner.dialect = scala212
  }
  "glob:**/*.sbt" {
    runner.dialect = Sbt1
  }
}

maxColumn = 120

align = most
align.openParenCallSite = false
align.openParenDefnSite = false
align.multiline = true
align.tokens."+" = [

  {code = "<-", owner = "Enumerator.Generator"},

  # Everything before the Term.Assign was the default regex. To find the
  # default value, look through the code here:
  # https://github.com/scalameta/scalafmt/blob/master/scalafmt-core/shared/src/main/scala/org/scalafmt/config/Align.scala
  {code = "=", owner = "(Enumerator.Generator|Val|Defn.(Va(l|r)|Def|Type))|Term.Assign|Param"},

  "//", # used to align comments
  ":",  # used for aligning type definition
  {code = "->", owner = "Term.ApplyInfix"}, # used to align tuples 1 -> 2

  //sbt specific
  {code = "%", owner = "Term.ApplyInfix"},
  {code = "%%", owner = "Term.ApplyInfix"},
  {code = "%%%", owner = "Term.ApplyInfix"},
  {code = ":=", owner = "Term.ApplyInfix"},
  {code = "withSources", owner = "Term.ApplyInfix"},
  "extends"
]

###############################################################################

continuationIndent {
  callSite = 2
  defnSite = 2
  ctorSite = 2
  extendSite = 2
  withSiteRelativeToExtends = 0
}

###############################################################################

verticalMultiline.atDefnSite = false
verticalMultiline.newlineAfterOpenParen = true
verticalMultiline.arityThreshold = 3

###############################################################################

newlines {
  topLevelStatements = [before]
  sometimesBeforeColonInMethodReturnType = true
  penalizeSingleSelectMultiArgList = false
  alwaysBeforeElseAfterCurlyIf = true
  neverInResultType = false
  alwaysBeforeMultilineDef = false
  implicitParamListModifierForce = []
  afterCurlyLambda = squash
}

###############################################################################

spaces {
  afterKeywordBeforeParen = true
}

###############################################################################

binPack {
  parentConstructors = true
  literalArgumentLists = true
  literalsMinArgCount = 5
}

###############################################################################

optIn {
  breaksInsideChains = false
  # preserves existing newlines in . chain calls.
  # See: optIn.breakChainOnFirstMethodDot = true
  breakChainOnFirstMethodDot = true
  blankLineBeforeDocstring = true
}

###############################################################################

rewrite {
  rules = [
    SortModifiers
    PreferCurlyFors
    AvoidInfix
    RedundantBraces
    RedundantParens
  ]
}

rewrite.redundantBraces.generalExpressions = false
rewrite.redundantBraces.methodBodies = true
rewrite.redundantBraces.includeUnitMethods = false
rewrite.redundantBraces.stringInterpolation = true
rewrite.redundantBraces.parensForOneLineApply = true
rewrite.neverInfix.excludeFilters = [withSources]

###############################################################################

preset = default
danglingParentheses.preset = true

###############################################################################

assumeStandardLibraryStripMargin = true
includeNoParensInSelectChains = false
includeCurlyBraceInSelectChains = true
trailingCommas = multiple

###############################################################################

runner {
  optimizer {
    # Set to -1 to disable. Increase number to require bigger argument bodies to trigger flag
    # presumably, this number is number of characters.
    forceConfigStyleOnOffset = 150

    # minimum number of func arguments before config-style (look at top of file) is enabled
    forceConfigStyleMinArgCount = 2
  }
}
